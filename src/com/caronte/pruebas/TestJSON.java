package com.caronte.pruebas;

import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Enumeration;

import com.caronte.json.JSON;
import com.caronte.json.JSONObject;

public class TestJSON 
{
	public static void main(String[] args) 
	{
		try
		{
			byte[] bytes = Files.readAllBytes(Paths.get("C:\\Users\\armando.castillo\\Downloads\\JSON\\TEST\\EjemploJSON03.txt"));

			String string = new String(bytes, "UTF-8");
			JSONObject json = JSON.parse(string);
			System.out.println(json);
			
//			
//			for (Enumeration<String> e = json.elements(); e.hasMoreElements();) System.out.println(e.nextElement());
			
//			JSONObject json = JSON.parse("{ \"xmlBase64\" : \"\", \"sello_mn\" : \"S\", \"fecha_publicacion\" : \"2016-05-09 05:03:48\" }");
//			System.out.println(json);
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
}
